// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables for Supabase credentials
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_PUBLIC_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error("Supabase environment variables are not set. Please check your .env file.");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
  }
);

// Helper to detect auth issues
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session ? 'User logged in' : 'No user');
});

// Create storage buckets if they don't exist on app initialization
const initializeStorage = async () => {
  try {
    // Check if the buckets exist
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error checking buckets:', error.message);
      return;
    }

    const hasPicturesBucket = buckets.some(bucket => bucket.name === 'visitor-pictures');
    const hasSignaturesBucket = buckets.some(bucket => bucket.name === 'visitor-signatures');

    // Helper function to create a bucket
    const createBucket = async (bucketName: string, fileSizeLimit: number) => {
      try {
        await supabase.storage.createBucket(bucketName, {
          public: true,
          fileSizeLimit,
        });
        console.log(`Created ${bucketName} bucket`);
      } catch (err) {
        console.error(`Error creating ${bucketName} bucket:`, err.message);
      }
    };

    // Create buckets if they don't exist
    if (!hasPicturesBucket) {
      await createBucket('visitor-pictures', 2097152); // 2MB limit for pictures
    }

    if (!hasSignaturesBucket) {
      await createBucket('visitor-signatures', 1048576); // 1MB limit for signatures
    }

    // Log successful initialization
    console.log('Supabase client initialized successfully');
    console.log('Available buckets:', buckets.map(b => b.name));
  } catch (err) {
    console.error('Error initializing storage:', err.message);
  }
};

initializeStorage();
