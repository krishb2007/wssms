
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://efxeohyxpnwewhqwlahw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVmeGVvaHl4cG53ZXdocXdsYWh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4NTQ5MzgsImV4cCI6MjA2MjQzMDkzOH0.sJd48tkyK2GSaFxT8aRBLr9S1j4CJSaLxP_C3dp_pr0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

// Helper to detect auth issues
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session ? 'User logged in' : 'No user');
});

// Create storage buckets if they don't exist on app initialization
const initializeStorage = async () => {
  try {
    // Check if the buckets exist
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error checking buckets:', error);
      return;
    }
    
    const hasPicturesBucket = buckets.some(bucket => bucket.name === 'visitor-pictures');
    const hasSignaturesBucket = buckets.some(bucket => bucket.name === 'visitor-signatures');
    
    // Log successful initialization
    console.log('Supabase client initialized successfully');
    
  } catch (err) {
    console.error('Error initializing storage:', err);
  }
};

initializeStorage();
