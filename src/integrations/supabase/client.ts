// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

// Auth listener
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session ? 'User logged in' : 'No user');
});

// Create storage buckets if they don't exist
const initializeStorage = async () => {
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();

    if (error) {
      console.error('Error checking buckets:', error);
      return;
    }

    const hasPicturesBucket = buckets.some(bucket => bucket.name === 'visitor-pictures');
    const hasSignaturesBucket = buckets.some(bucket => bucket.name === 'visitor-signatures');

    if (!hasPicturesBucket) {
      try {
        await supabase.storage.createBucket('visitor-pictures', {
          public: true,
          fileSizeLimit: 2 * 1024 * 1024, // 2MB
        });
        console.log('Created visitor-pictures bucket');
      } catch (err) {
        console.error('Error creating visitor-pictures bucket:', err);
      }
    }

    if (!hasSignaturesBucket) {
      try {
        await supabase.storage.createBucket('visitor-signatures', {
          public: true,
          fileSizeLimit: 1 * 1024 * 1024, // 1MB
        });
        console.log('Created visitor-signatures bucket');
      } catch (err) {
        console.error('Error creating visitor-signatures bucket:', err);
      }
    }

    console.log('Supabase client initialized successfully');
    console.log('Available buckets:', buckets.map(b => b.name));
  } catch (err) {
    console.error('Error initializing storage:', err);
  }
};

initializeStorage();
